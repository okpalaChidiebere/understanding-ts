{
  "compilerOptions": { //configure how to compiler behaves when compiling our files
    //the configuration options we commented out will make the compile resolve to its default values during compilation
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": [],                             /* Specify library files to be included in the compilation. eg 'dom', 'es6', 'dom.iterable', 'scripthost' are all default libraries. */
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */ //used to debug typeScript files directly on the browser where you can put breakpoints and all that. Just go to the 'source' tab when you inspect your code. you will see all your typescript files there when you uncomment this line. This is possible though the map file generated by the compiler
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // "outDir": "./",                        /* Redirect output structure to the directory. */ //you can create a '/dist' directory where you will want to have all you js output files will be. Then you will have "outDir": "./dist"
    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */ /you use this seting together with 'outDir'. Somtimes you just wwant files as well as the folder they are arranged in inside the src folder to be to be compiled only. Not files ourside the src like a POSTMAN file or some ts file you dont want
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */ //make your compiler check for code files being correct without creating an output file
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "noEmitOnError": true,                   /*When it is false, if you have an error in your ts and still compile the code, the compiler will show the error and STILL generate an output file. When it is true, and there is an error in your ts file(s), the no outfile will be generated. By default it is set to false, meaning you still get output files when you have syntax error in ts*/

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */ //setting this line to true, means we dont want to set any of the other strict compile options below to true
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */ //checks for parameters for your ts function. when set to true, the parameter check will be ignored
    // "strictNullChecks": true,              /* Enable strict null checks. */ //when set to true, the compile will not check for variables that could potentially hold a null value. Eg document.queryselector('button') this button might not exist in the html page
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */ //this will be helpful when you implement classes and inheritance to catch bugs that comes along with implementing function types in typescript.
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    "noUnusedLocals": true,                /* Report errors on unused locals. */ //complaines about local variables that is declared and not used. it will not complain about global variables though
    "noUnusedParameters": true,            /* Report errors on unused parameters. */
    "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */
  },

"exclude": [ //you enter path to file(s) that should not be included in compilation when you run 'tsc' on the entire project
  //"app.ts" //this means this particular typescript file will be excluded from compilation. Ideally is is usually some postman JSOn file, etc
  //"**/*.dev.ts" //any file in the folder(s) with that the ending .dev.ts
  "node_modules" //this is a porpular one you want the compiler to ignore. this folder holds all the dependencies defined in package.json. FYI: the compiler will igore it be default though. You dont really need to add this
]
//if you set the include key, you now really have to put all the files you want to compile in there. Any files(s) you dont include will not be compiled
//if you set both keys, the include will first compile then the exclude will run right after. 
}
